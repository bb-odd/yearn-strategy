// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {BaseStrategy, StrategyParams} from "@yearnvaults/contracts/BaseStrategy.sol";
import {SafeERC20, SafeMath, IERC20, Address} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "../interfaces/IEuler.sol";
import "../interfaces/IEToken.sol";
import "../interfaces/IDToken.sol";
import "../interfaces/IUniswap.sol";
import "../interfaces/IVault.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "../interfaces/<protocol>/<Interface>.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    // used to determine what % of dai to borrow based on collat deposited on euler
    uint256 public borrowPercent = 20;

    IEtoken public eulerStaking;
    IDtoken public eulerCollat;
    IEuler public eulerMarket;
    IUniSwap public uniswap;
    IVault public daiVault;
    IERC20 public DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
    address public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

    constructor(address _vault) public BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want
        // maxReportDelay = 6300;
        // profitFactor = 100;
        // debtThreshold = 0;

        // initialize the strategy
        _initialize(_vault, msg.sender, msg.sender, msg.sender);

        eulerMarket = IEuler(0x3520d5a913427E6F0D6A83E07ccD4A4da316e4d3);
        eulerStaking = eulerMarket.underlyingToEToken(want);

        daiVault = IVault(0xdA816459F1AB5631232FE5e97a05BBBb94970c95);

        want.safeApprove(
            address(0x27182842E098f60e3D576794A5bFFb0777E025d3),
            type(uint256).max
        );
        DAI.safeApprove(
            address(0x27182842E098f60e3D576794A5bFFb0777E025d3),
            type(uint256).max
        );
        DAI.safeApprove(address(uniswap), type(uint256).max);
    }

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        return "StrategyEulerUni";
    }

    function getStakedDai() public view returns (uint256) {
        uint256 stakedDai = (daiVault.balanceOf(address(this)) *
            daiVault.pricePerShare()) / daiVault.decimals;
        return stakedDai;
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        uint256 stakedDai = getStakedDai();
        uint256 borrowedDai = eulerCollat.balanceOf(address(this));

        uint256 daiProfit = 0;
        uint256 daiLoss = 0;
        if (stakedDai >= borrowedDai) {
            daiProfit = priceCheck(
                address(DAI),
                address(want),
                stakedDai - borrowedDai
            );
        } else {
            daiLoss = priceCheck(
                address(DAI),
                address(want),
                borrowedDai - stakedDai
            );
        }
        // add eul token value from borrowing here
        // https://github.com/euler-xyz/eul-merkle-trees
        uint256 totalAssets;
        uint256 stakedAssets = eulerStaking.balanceOfUnderlying(address(this));
        uint256 looseAssets = want.balanceOf(address(this));
        totalAssets = stakedAssets.add(looseAssets);
        totalAssets = (totalAssets.add(daiProfit)).sub(daiLoss);
        return totalAssets;
    }

    function prepareReturn(
        uint256 _debtOutstanding
    )
        internal
        override
        returns (uint256 _profit, uint256 _loss, uint256 _debtPayment)
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
        // NOTE: _debtPayment can be less than _debtOutstanding
        _profit = 0;
        _loss = 0;

        uint256 totalDebt = vault.strategies(address(this)).totalDebt;
        uint256 totalAssets = estimatedTotalAssets();

        // claim eul tokens here from borrowing

        // handles realised profits
        if (totalAssets >= totalDebt) {
            _profit = totalAssets - totalDebt;
            uint256 _amountNeeded = _debtOutstanding.add(_profit);
            if (_amountNeeded > 0) {
                (_liquidatedAmount, _loss) = liquidatePosition(_amountNeeded);
            }
            // any loss from slippage, gas costs etc handled here
            if (_profit > _loss) {
                _profit = _profit.sub(_loss);
                _loss = 0;
            } else {
                _loss = _loss.sub(_profit);
                _profit = 0;
            }
        } else {
            // handles any realised losses (most likely none)
            uint256 percentageStakedToWithdraw = (totalAssets * 100).div(
                Math.min(totalAssets, _debtOutstanding)
            );
            _loss =
                ((totalDebt - totalAssets) * percentageStakedToWithdraw) /
                100;
            if (_debtOutstanding > 0) {
                (_liquidatedAmount, _extraLoss) = liquidatePosition(
                    _debtOutstanding
                );
            }
            _loss = _loss.add(_extraLoss);
        }

        // use Math.min as strategy may not have enough want tokens to repay debt
        _debtPayment = Math.min(_debtOutstanding, _liquidatedAmount);
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
        // if _debtOutstanding > want available do nothing;
        // stake all want available into euler
        if (_debtOutstanding >= want.balanceOf(address(this))) {
            return;
        }

        if (eulerCollat == address(0)) {
            eulerCollat = IDToken(eulerMarket.underlyingToDToken(DAI));
        }

        uint256 stakeAmount = (want.balanceOf(address(this))).sub(
            _debtOutstanding
        );

        eulerStaking.deposit(0, stakeAmount);

        // this might be wrong but idk fix it later
        uint256 maxCollat = eulerCollat.debtAllowance(
            address(this),
            address(this)
        );

        uint256 stakedDai = getStakedDai();
        uint256 daiToBorrow = (maxCollat * borrowPercent) / 100;

        if (stakedDai >= daiToBorrow) {
            return;
        }

        daiToBorrow = daiToBorrow.sub(stakedDai);

        if (daiVault.availableDepositLimit() == 0) {
            return;
        }

        eulerCollat.borrow(
            0,
            Math.min(daiToBorrow, daiVault.availableDepositLimit())
        );

        daiVault.deposit(
            Math.min(daiToBorrow, daiVault.availableDepositLimit())
        );
    }

    function liquidatePosition(
        uint256 _amountNeeded
    ) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        // figure out updated daiToBorrow amount
        // remove dai from vault daiStaked - newDaiToBorrow
        // repay dai collat into euler
        // then liquidate certain amount of `want` from euler

        _loss = 0;
        uint256 stakedAssets = eulerStaking.balanceOfUnderlying(address(this));
        uint256 newDaiBorrow = ((stakedAssets - _amountNeeded) *
            borrowPercent) / 100;

        if (newDaiBorrow < getStakedDai()) {
            uint256 sharesToLiquidate = daiVault.balanceOf(address(this)) -
                ((newDaiBorrow * DAI.decimals) / daiVault.pricePerShare());

            daiVault.withdraw(
                Math.min(daiVault.maxAvailableShares(), sharesToLiquidate)
            );
        }

        eulerCollat.repay(0, DAI.balanceOf(address(this)));

        uint256 wantAvailable = want.balanceOf(address(this));
        eulerStaking.withdraw(0, _amountNeeded);
        uint256 newWantAvailable = want.balanceOf(address(this));

        _liquidatedAmount = newWantAvailable - wantAvailable;
        if (_liquidatedAmount < _amountNeeded) {
            _loss = _amountNeeded - _liquidatedAmount;
        }
    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        return want.balanceOf(address(this));
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    {}

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(
        uint256 _amtInWei
    ) public view virtual override returns (uint256) {
        // TODO create an accurate price oracle
        return _amtInWei;
    }

    // uses uniswap router to check price
    // used in the strategy to check price of dai -> uni so we can estimate total assets
    function priceCheck(
        address _start,
        address _end,
        uint256 _amount
    ) public view returns (uint256) {
        require(_amount > 0, "Amount cannot be 0");
        address[] path;
        if (start == weth) {
            path = new address[](2);
            path[0] = weth;
            path[1] = end;
        } else {
            path = new address[](3);
            path[0] = start;
            path[1] = weth;
            path[2] = end;
        }

        uint256[] amounts = uniswap.getAmountsOut(_amount, path);
        return amounts[amounts.length - 1];
    }
}
